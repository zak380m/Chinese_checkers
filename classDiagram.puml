@startuml

package zak380mGazyli.Boards {
    interface Board {
        Cell[][] getBoard()
        int[][] getStartArea(int area_num)
        int[][] getNeighbours()
        void updateBoard(int startX, int startY, int endX, int endY)
        void displayBoard()
    }
}

package zak380mGazyli.Gamemodes {
    interface Gamemode {
        boolean setNumberOfPlayers(int numberOfPlayers, Board board)
        boolean validateMove(int startX, int startY, int endX, int endY, Board board)
        void processMove(int startX, int startY, int endX, int endY, Board board)
        void processPass()
        boolean isPass()
        Map<Integer, Integer> playerPlace()
        int getTurn()
        String getName()
        int getTurnCount()
        String getPlayerColor(int playerNumber)
    }
}

package zak380mGazyli.PlayersHandling {
    class GameRoom {
        - Server server
        - String password
        - int roomId
        - int numberOfPlayers
        - int numberOfBots
        - Map<Integer, PlayerHandler> players
        - Map<Integer, Bot> bots
        - Board board
        - Gamemode gamemode
        - int realNumberOfPlayers
        + GameRoom(Gamemode gamemode, Board board, String password, int numberOfPlayers, int numberOfBots, int roomId, Server server)
        + String getGamemodeName()
        + String getPassword()
        + int getRoomId()
        + boolean areThereMissingPlayers()
        + synchronized boolean addPlayer(PlayerHandler playerHandler)
        + synchronized void processMove(int startX, int startY, int endX, int endY)
        + synchronized void processPass()
        + synchronized void broadcastToAllExceptOne(String jsonToBroadcast, int playerNumber)
        + synchronized void sendToAPlayer(String jsonToSend, int playerNumber)
        + synchronized void broadcastCurrentGameState()
        + String currentGameState(int playerNumber)
        + synchronized void removePlayer(int index)
        + Gamemode getGamemode()
        + int getNumberOfPlayers()
        + boolean isGameFinished()
    }

    class PlayerHandler {
        - Server server
        - Socket socket
        - GameRoom room
        - ObjectOutputStream out
        - ObjectInputStream in
        - Gamemode gamemode
        - int playerNumber
        - Boolean isConnected
        - Gson gson
        - Map<String, CommandHandler> commandHandlers
        - volatile boolean isReady
        - GameBuilder gameBuilder
        + PlayerHandler(Socket socket, Server server)
        + void run()
        + void sendErrorMessage(String message)
        + void sendJsonReply(String jsonReply)
        + void handleDisconnection()
        + int getPlayerNumber()
        + void setPlayerInRoom(int playerNumber, GameRoom room, Gamemode gamemode)
        + void sendSetUp(SetUp setUp)
        + SetUp getSetUp()
        + boolean createGameRoom(String gamemodeName, int playerCount, int botCount, String password)
    }
}

package zak380mGazyli {
    class Client {
        - Socket socket
        - ObjectOutputStream out
        - ObjectInputStream in
        - final Display display
        - boolean isConnected
        + static void main(String[] args)
        + void startClient()
        - void sendCommands()
        - void quit()
    }

    class Server {
        - Map<Integer, GameRoom> gameRooms
        - int roomCounter
        + static void main(String[] args)
        + void startServer()
        + synchronized GameRoom createGameRoom(Gamemode gamemode, Board board, String password, int numberOfPlayers, int numberOfBots)
        + synchronized GameRoom joinGameRoom(String gameName, String password)
        + synchronized void deleteGameRoom(GameRoom room)
    }
}

package zak380mGazyli.Displays {
    interface Display {
        void displayInterface(String board)
        String getCommands()
        void quit()
    }
}

package zak380mGazyli.Builders {
    class GameBuilder {
        - static final Map<String, GameComponents> gameList
        - String gameName
        - static final List<String> gameNameList
        + GameBuilder()
        + void setGameName(String gameName)
        + void addGame(String name, GamemodeBuilder gamemodeBuilder, BoardBuilder boardBuilder)
        + GamemodeBuilder getGamemodeBuilder()
        + BoardBuilder getBoardBuilder()
        + static String[] getGameNames()
        + List<String> getGameList()
        + List<String> getBoardList()
        - void populateGamelist()
    }
}

zak380mGazyli.Server *-- zak380mGazyli.PlayersHandling.GameRoom
zak380mGazyli.PlayersHandling.GameRoom *-- zak380mGazyli.PlayersHandling.PlayerHandler
zak380mGazyli.PlayersHandling.PlayerHandler ..|> Runnable
zak380mGazyli.Client *-- zak380mGazyli.Displays.Display
zak380mGazyli.Server *-- zak380mGazyli.Gamemodes.Gamemode
zak380mGazyli.Server *-- zak380mGazyli.Boards.Board
zak380mGazyli.Server *-- zak380mGazyli.Builders.GameBuilder

@enduml