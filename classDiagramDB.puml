@startuml

package zak380mGazyli.Boards {
    interface Board {
        Cell[][] getBoard()
        int[][] getStartArea(int area_num)
        int[][] getNeighbours()
        void updateBoard(int startX, int startY, int endX, int endY)
        void displayBoard()
        String getName()
    }
}

package zak380mGazyli.Gamemodes {
    interface Gamemode {
        boolean setNumberOfPlayers(int numberOfPlayers, Board board)
        boolean validateMove(int startX, int startY, int endX, int endY, Board board)
        void processMove(int startX, int startY, int endX, int endY, Board board)
        void processPass()
        boolean isPass()
        Map<Integer, Integer> playerPlace()
        int getTurn()
        String getName()
        int getTurnCount()
        String getPlayerColor(int playerNumber)
    }
}

package zak380mGazyli.PlayersHandling {
    class GameRoom {
        - Server server
        - String password
        - int roomId
        - int numberOfPlayers
        - int numberOfBots
        - Map<Integer, PlayerHandler> players
        - Map<Integer, Bot> bots
        - Board board
        - Gamemode gamemode
        - int realNumberOfPlayers
        + GameRoom(Gamemode gamemode, Board board, String password, int numberOfPlayers, int numberOfBots, int roomId, Server server)
        + String getGamemodeName()
        + String getPassword()
        + int getRoomId()
        + boolean areThereMissingPlayers()
        + synchronized boolean addPlayer(PlayerHandler playerHandler)
        + synchronized void processMove(int startX, int startY, int endX, int endY)
        + synchronized void processPass()
        + synchronized void broadcastToAllExceptOne(String jsonToBroadcast, int playerNumber)
        + synchronized void sendToAPlayer(String jsonToSend, int playerNumber)
        + synchronized void broadcastCurrentGameState()
        + String currentGameState(int playerNumber)
        + synchronized void removePlayer(int index)
        + Gamemode getGamemode()
        + int getNumberOfPlayers()
        + boolean isGameFinished()
    }

    class PlayerHandler {
        - Server server
        - Socket socket
        - GameRoom room
        - ObjectOutputStream out
        - ObjectInputStream in
        - Gamemode gamemode
        - int playerNumber
        - Boolean isConnected
        - Gson gson
        - Map<String, CommandHandler> commandHandlers
        - volatile boolean isReady
        - GameBuilder gameBuilder
        + PlayerHandler(Socket socket, Server server)
        + void run()
        + void sendErrorMessage(String message)
        + void sendJsonReply(String jsonReply)
        + void handleDisconnection()
        + int getPlayerNumber()
        + void setPlayerInRoom(int playerNumber, GameRoom room, Gamemode gamemode)
        + void sendSetUp(SetUp setUp)
        + SetUp getSetUp()
        + boolean createGameRoom(String gamemodeName, String boardName, int playerCount, int botCount, String password)
    }
}

package zak380mGazyli.Bots {
    interface Bot extends Runnable {
        void setGame(GameRoom gameroom, Gamemode gamemode, Board board, int playerNumber)
    }
}

package zak380mGazyli {
    class Client {
        - Socket socket
        - ObjectOutputStream out
        - ObjectInputStream in
        - final Display display
        - boolean isConnected
        + static void main(String[] args)
        + void startClient()
        - void sendCommands()
        - void quit()
    }

    class Server {
        - Map<Integer, GameRoom> gameRooms
        - int roomCounter
        + static void main(String[] args)
        + void startServer()
        + synchronized GameRoom createGameRoom(Gamemode gamemode, Board board, String password, int numberOfPlayers, int numberOfBots, Game game)
        + synchronized GameRoom joinGameRoom(String password)
        + synchronized GameRoom loadGameRoom(int gameID, String password)
        + synchronized void deleteGameRoom(GameRoom room)
        + synchronized void deleteGameByID(int gameID)
    }
}

package zak380mGazyli.Displays {
    interface Display {
        void displayInterface(String board)
        String getCommands()
        void quit()
    }
}

package zak380mGazyli.Database.Models {
    class Game {
        - int id
        - String gamemode
        - String board
        - Timestamp createdAt
        - int playerNumber
        - List<Move> moves
        + Game()
        + Game(String gamemode, String board, int playerNumber)
        + int getId()
        + String getGamemode()
        + void setGamemode(String gamemode)
        + String getBoard()
        + void setBoard(String board)
        + Timestamp getCreatedAt()
        + int getPlayerNumber()
        + void setPlayerNumber(int playerNumber)
    }

    class Move {
        - Game game
        - int turnNumber
        - int startX
        - int startY
        - int endX
        - int endY
        - boolean isPass
        - Timestamp moveTimestamp
        + Move()
        + Move(Game game, int turnNumber, int startX, int startY, int endX, int endY, boolean isPass)
        + Game getGame()
        + void setGame(Game game)
        + int getTurnNumber()
        + void setTurnNumber(int turnNumber)
        + int getStartX()
        + void setStartX(int startX)
        + int getStartY()
        + void setStartY(int startY)
        + int getEndX()
        + void setEndX(int endX)
        + int getEndY()
        + void setEndY(int endY)
        + boolean isPass()
        + void setPass(boolean pass)
        + Timestamp getMoveTimestamp()
        + void setMoveTimestamp(Timestamp moveTimestamp)
    }

    class MoveId {
        - int game
        - int turnNumber
        + MoveId()
        + MoveId(int game, int turnNumber)
        + boolean equals(Object o)
        + int hashCode()
        + int getGame()
        + void setGame(int game)
        + int getTurnNumber()
        + void setTurnNumber(int turnNumber)
    }
}

package zak380mGazyli.Database.Repositories {
    interface MoveRepository {
        List<Move> findByGameId(int gameId)
    }

    interface GameRepository {
    }
}

package zak380mGazyli.Database.Service {
    class MoveService {
        + List<Move> getAllMoves()
        + Move getGame(MoveId id)
        + Move createMove(Move move)
        + void deleteMove(MoveId id)
        + List<Move> getMovesByGameId(int gameId)
    }

    class GameService {
        + List<Game> getAllGames()
        + Game getGame(int id)
        + Game createGame(Game game)
        + void deleteGame(int id)
    }
}

package zak380mGazyli {
    class Mediator {
        - GameService gameService
        - MoveService moveService
        - GameBuilder gameBuilder
        - Server server
        + Mediator(GameService gameService, MoveService moveService)
        + void setServer(Server server)
        + void addGame(Game game)
        + void addMove(Move move)
        + void deleteGame(int gameID)
        + GameRoom loadRoom(int GameId, String password)
        + void playGame(GameRoom room)
    }
}

zak380mGazyli.Server *-- zak380mGazyli.PlayersHandling.GameRoom
zak380mGazyli.PlayersHandling.GameRoom *-- zak380mGazyli.PlayersHandling.PlayerHandler
zak380mGazyli.PlayersHandling.GameRoom *-- zak380mGazyli.Bots.Bot
zak380mGazyli.PlayersHandling.GameRoom *-- zak380mGazyli.Database.Models.Game
zak380mGazyli.PlayersHandling.PlayerHandler ..|> Runnable
zak380mGazyli.Bots.Bot ..|> Runnable
zak380mGazyli.Client *-- zak380mGazyli.Displays.Display
zak380mGazyli.Server *-- zak380mGazyli.Gamemodes.Gamemode
zak380mGazyli.Server *-- zak380mGazyli.Boards.Board
zak380mGazyli.Database.Models.Game *-- zak380mGazyli.Database.Models.Move
zak380mGazyli.Database.Models.Move *-- zak380mGazyli.Database.Models.MoveId
zak380mGazyli.Database.Service.MoveService *-- zak380mGazyli.Database.Repositories.MoveRepository
zak380mGazyli.Database.Service.GameService *-- zak380mGazyli.Database.Repositories.GameRepository
zak380mGazyli.Mediator *-- zak380mGazyli.Database.Service.GameService
zak380mGazyli.Mediator *-- zak380mGazyli.Database.Service.MoveService
zak380mGazyli.Mediator *-- zak380mGazyli.Server

@enduml